'''Create_user.py
Command-line interface to create new API users for a BleepBleepBleep status page instance.
'''
import argparse, secrets, internal_libraries.data as data
from werkzeug import generate_password_hash
print("Starting user creation CLI...")
#Argument parser
arg_parser = argparse.ArgumentParser(description="Create new API users for a BleepBleepBleep status page instance")
arg_parser.add_argument(
    "number_of_users", type=int,
    nargs="?", #This will make the argument optional - thanks Google! <3
    default=1,
    help="The number of users to add."
)
arg_parser.add_argument(
    "token_length", type=int,
    nargs="?", #This will make the argument optional - thanks Google! <3
    default=16,
    help="The length of the API token to generate."
)
print("Parsing arguments...")
args = arg_parser.parse_args()
number_of_users_to_add = args.number_of_users
token_length = args.token_length
print(f"Parsed settings: Amount of users to be added: {number_of_users_to_add}. Token length: {token_length}")
#Get previously registred users
print("Getting previously registered users...")
new_user_data = prev_user_data = data.get_configuration("api_users")
'''Usernames generated by the CLI will be in the format user-{number}.
We don't want to duplicate user IDs, that would be bad, so we make sure that doesn't happen by specifying an offset
for user numbers.'''
registered_users_offset = len(prev_user_data["users"])
#Generate users
user_list = [] #List of users to add
for user_number in range(number_of_users_to_add):
    user_id = f"user-{user_number+registered_users_offset}"
    user_token_raw = secrets.token_urlsafe(token_length)
    user_token_hashed = generate_password_hash(user_token_raw)
    user_data = {"id": user_id, "token": user_token_hashed}
    #Add user to list of users
    user_list.append(user_data)
    #Print out user information
    print(f"-----GENERATED USER-----\nID: {user_id} Token: {user_token_raw}\n-----")
input("User data has been printed out above. !THIS IS THE ONLY TIME YOU WILL SEE THIS! Make sure to copy it\nHit enter when you're ready to continue.")
print("Updating user database...")
prev_user_data["users"].extend(user_list) #Make local changes
#Push changes
print("Pushing changes...")
user_data_path = data.subpath_str_to_path("api_users")
data.update_json(user_data_path, new_user_data)
print("Changes pushed.")
